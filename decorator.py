# -*- coding: utf-8 -*-
"""Decorator.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1PLDtcCSuXBjiHsyP2a7mqEoUuiWZUE1u

Declaramos nuestra estructura
"""

from abc import ABC, abstractmethod

# Component
class Vehicle(ABC):

    @abstractmethod
    def acceleration(self):
        pass

    @staticmethod
    def benchmark(data):
        vehicles = [f'{name}: {v.acceleration()}' for name, v in data.items()]
        print('== AceleraciÃ³n ==', *vehicles, sep='\n')

# Concrete components
class Car(Vehicle): 
    def acceleration(self):
        return 10

class Bike(Vehicle):
    def acceleration(self):
        return 11

# Decorator
class PerformancePart(Vehicle):
    def __init__(self, vehicle: Vehicle):
        self.vehicle = vehicle  # Protected

    def acceleration(self):
        return self.vehicle.acceleration()

# Concrete decorators
class TurboCharger(PerformancePart):
    def acceleration(self):
        return self.vehicle.acceleration() + 2

class Engine(PerformancePart):
    def acceleration(self):
        return self.vehicle.acceleration() + 6

class Nitrous(PerformancePart):
    def acceleration(self):
        return self.vehicle.acceleration() * 1.5

    def is_over(self):
        return self.vehicle

"""Ejemplos de uso"""

car = Car()     # Carro
bike = Bike()   # Moto

Vehicle.benchmark({'Carro': car, 'Moto': bike})

car = Engine(car)           # Carro + Motor
bike = TurboCharger(bike)   # Moto + Turbo cargador

Vehicle.benchmark({'Carro': car, 'Moto': bike})

car = Nitrous(car)      # Carro + Motor + Nitro
bike = Engine(bike)     # Moto + Turbo cargador + Motor

Vehicle.benchmark({'Carro': car, 'Moto': bike})

print('\n> El carro se queda sin nitro\n')
car = car.is_over()     # Carro + Motor

Vehicle.benchmark({'Carro': car, 'Moto': bike})