# -*- coding: utf-8 -*-
"""Proxy.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1FPUaDbJFQBgb_jBz-NE63oeUy0YmXwP5
"""

from abc import ABC, abstractmethod

class ServidorRemoto(ABC):
  
  @abstractmethod
  def cargar_pagina(self):
    pass


class RealServidorRemoto(ServidorRemoto):

  def cargar_pagina(self) -> None:
    print("Cargando")


class Proxy(ServidorRemoto):

    def __init__(self, real_servidor_remoto: RealServidorRemoto) -> None:
        self._real_servidor_remoto = real_servidor_remoto

    def cargar_pagina(self) -> None:

        if self.validar_acceso():
            self._real_servidor_remoto.cargar_pagina()
            self.registro_acceso()

    def validar_acceso(self) -> bool:
        print("Proxy: Validando acceso para ejecutar cargar página real.")
        return True

    def registro_acceso(self) -> None:
        print("Proxy: Guardando tiempo de petición.", end="")
  

def cliente(servidor_remoto: ServidorRemoto):

    servidor_remoto.cargar_pagina()


if __name__ == "__main__":
    print("Cliente: Ejecutando el cliente con servidor remoto real.")
    servidor_remoto_real = RealServidorRemoto()
    cliente(servidor_remoto_real)

    print("")

    print("Cliente: Ejecutando mismo cliente con proxy")
    proxy = Proxy(servidor_remoto_real)
    cliente(proxy)

u = ServidorRemoto()
u.CargarPagina(2, "sddfff")